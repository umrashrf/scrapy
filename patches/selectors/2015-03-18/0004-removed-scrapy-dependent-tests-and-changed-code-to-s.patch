From 864a5e7db8c8809ddf529f36901054b9c0c10b0b Mon Sep 17 00:00:00 2001
From: Umair Ashraf <umr.ashrf@gmail.com>
Date: Wed, 18 Mar 2015 15:42:12 +0500
Subject: [PATCH 4/5] removed scrapy dependent tests and changed code to suit
 selectors package

---
 tests/__init__.py                    |  19 ---
 tests/test_selector.py               | 222 ++++-------------------------------
 tests/test_selector_csstranslator.py |  12 +-
 3 files changed, 31 insertions(+), 222 deletions(-)
 delete mode 100644 tests/__init__.py

diff --git a/tests/__init__.py b/tests/__init__.py
deleted file mode 100644
index c6dd451..0000000
--- a/tests/__init__.py
+++ /dev/null
@@ -1,19 +0,0 @@
-"""
-tests: this package contains all Scrapy unittests
-
-see http://doc.scrapy.org/en/latest/contributing.html#running-tests
-"""
-
-import os
-
-try:
-    import unittest.mock as mock
-except ImportError:
-    import mock
-
-tests_datadir = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'sample_data')
-
-def get_testdata(*paths):
-    """Return test data"""
-    path = os.path.join(tests_datadir, *paths)
-    return open(path, 'rb').read()
diff --git a/tests/test_selector.py b/tests/test_selector.py
index 6fbb451..91c7d31 100644
--- a/tests/test_selector.py
+++ b/tests/test_selector.py
@@ -1,11 +1,10 @@
 import re
 import warnings
 import weakref
+
 from twisted.trial import unittest
-from scrapy.exceptions import ScrapyDeprecationWarning
-from scrapy.http import TextResponse, HtmlResponse, XmlResponse
-from scrapy.selector import Selector
-from scrapy.selector.lxmlsel import XmlXPathSelector, HtmlXPathSelector, XPathSelector
+
+from selectors import Selector
 
 
 class SelectorTestCase(unittest.TestCase):
@@ -15,8 +14,7 @@ class SelectorTestCase(unittest.TestCase):
     def test_simple_selection(self):
         """Simple selector tests"""
         body = "<p><input name='a'value='1'/><input name='b'value='2'/></p>"
-        response = TextResponse(url="http://example.com", body=body)
-        sel = self.sscls(response)
+        sel = self.sscls(url="http://example.com", text=body)
 
         xl = sel.xpath('//input')
         self.assertEqual(2, len(xl))
@@ -38,8 +36,7 @@ class SelectorTestCase(unittest.TestCase):
 
     def test_representation_slice(self):
         body = u"<p><input name='{}' value='\xa9'/></p>".format(50 * 'b')
-        response = TextResponse(url="http://example.com", body=body, encoding='utf8')
-        sel = self.sscls(response)
+        sel = self.sscls(url="http://example.com", text=body)
 
         self.assertEqual(
             map(repr, sel.xpath('//input/@name')),
@@ -48,8 +45,7 @@ class SelectorTestCase(unittest.TestCase):
 
     def test_representation_unicode_query(self):
         body = u"<p><input name='{}' value='\xa9'/></p>".format(50 * 'b')
-        response = TextResponse(url="http://example.com", body=body, encoding='utf8')
-        sel = self.sscls(response)
+        sel = self.sscls(url="http://example.com", text=body)
         self.assertEqual(
             map(repr, sel.xpath(u'//input[@value="\xa9"]/@value')),
             ["<Selector xpath=u'//input[@value=\"\\xa9\"]/@value' data=u'\\xa9'>"]
@@ -57,8 +53,7 @@ class SelectorTestCase(unittest.TestCase):
 
     def test_select_unicode_query(self):
         body = u"<p><input name='\xa9' value='1'/></p>"
-        response = TextResponse(url="http://example.com", body=body, encoding='utf8')
-        sel = self.sscls(response)
+        sel = self.sscls(url="http://example.com", text=body)
         self.assertEqual(sel.xpath(u'//input[@name="\xa9"]/@value').extract(), [u'1'])
 
     def test_list_elements_type(self):
@@ -69,8 +64,7 @@ class SelectorTestCase(unittest.TestCase):
 
     def test_boolean_result(self):
         body = "<p><input name='a'value='1'/><input name='b'value='2'/></p>"
-        response = TextResponse(url="http://example.com", body=body)
-        xs = self.sscls(response)
+        xs = self.sscls(url="http://example.com", text=body)
         self.assertEquals(xs.xpath("//input[@name='a']/@name='a'").extract(), [u'1'])
         self.assertEquals(xs.xpath("//input[@name='a']/@name='n'").extract(), [u'0'])
 
@@ -86,18 +80,6 @@ class SelectorTestCase(unittest.TestCase):
         self.assertEqual(xs.xpath("//div").extract(),
                          [u'<div><img src="a.jpg"><p>Hello</p></img></div>'])
 
-    def test_flavor_detection(self):
-        text = '<div><img src="a.jpg"><p>Hello</div>'
-        sel = self.sscls(XmlResponse('http://example.com', body=text))
-        self.assertEqual(sel.type, 'xml')
-        self.assertEqual(sel.xpath("//div").extract(),
-                         [u'<div><img src="a.jpg"><p>Hello</p></img></div>'])
-
-        sel = self.sscls(HtmlResponse('http://example.com', body=text))
-        self.assertEqual(sel.type, 'html')
-        self.assertEqual(sel.xpath("//div").extract(),
-                         [u'<div><img src="a.jpg"><p>Hello</p></div>'])
-
     def test_nested_selectors(self):
         """Nested selector tests"""
         body = """<body>
@@ -113,8 +95,7 @@ class SelectorTestCase(unittest.TestCase):
                     </div>
                   </body>"""
 
-        response = HtmlResponse(url="http://example.com", body=body)
-        x = self.sscls(response)
+        x = self.sscls(url="http://example.com", text=body)
         divtwo = x.xpath('//div[@class="two"]')
         self.assertEqual(divtwo.xpath("//li").extract(),
                          ["<li>one</li>", "<li>two</li>", "<li>four</li>", "<li>five</li>", "<li>six</li>"])
@@ -145,8 +126,7 @@ class SelectorTestCase(unittest.TestCase):
         </test>
         """
 
-        response = XmlResponse(url="http://example.com", body=body)
-        x = self.sscls(response)
+        x = self.sscls(url="http://example.com", text=body, type="xml")
 
         x.register_namespace("somens", "http://scrapy.org")
         self.assertEqual(x.xpath("//somens:a/text()").extract(),
@@ -162,8 +142,7 @@ class SelectorTestCase(unittest.TestCase):
     <p:SecondTestTag><material>iron</material><price>90</price><p:name>Dried Rose</p:name></p:SecondTestTag>
 </BrowseNode>
         """
-        response = XmlResponse(url="http://example.com", body=body)
-        x = self.sscls(response)
+        x = self.sscls(url="http://example.com", text=body, type="xml")
         x.register_namespace("xmlns", "http://webservices.amazon.com/AWSECommerceService/2005-10-05")
         x.register_namespace("p", "http://www.scrapy.org/product")
         x.register_namespace("b", "http://somens.com")
@@ -184,8 +163,7 @@ class SelectorTestCase(unittest.TestCase):
                     </ul>
                     Age: 20
                   </div>"""
-        response = HtmlResponse(url="http://example.com", body=body)
-        x = self.sscls(response)
+        x = self.sscls(url="http://example.com", text=body)
 
         name_re = re.compile("Name: (\w+)")
         self.assertEqual(x.xpath("//ul/li").re(name_re),
@@ -193,12 +171,6 @@ class SelectorTestCase(unittest.TestCase):
         self.assertEqual(x.xpath("//ul/li").re("Age: (\d+)"),
                          ["10", "20"])
 
-    def test_re_intl(self):
-        body = """<div>Evento: cumplea\xc3\xb1os</div>"""
-        response = HtmlResponse(url="http://example.com", body=body, encoding='utf-8')
-        x = self.sscls(response)
-        self.assertEqual(x.xpath("//div").re("Evento: (\w+)"), [u'cumplea\xf1os'])
-
     def test_selector_over_text(self):
         hs = self.sscls(text='<root>lala</root>')
         self.assertEqual(hs.extract(), u'<html><body><root>lala</root></body></html>')
@@ -207,8 +179,7 @@ class SelectorTestCase(unittest.TestCase):
         self.assertEqual(xs.xpath('.').extract(), [u'<root>lala</root>'])
 
     def test_invalid_xpath(self):
-        response = XmlResponse(url="http://example.com", body="<html></html>")
-        x = self.sscls(response)
+        x = self.sscls(url="http://example.com", text="<html></html>")
         xpath = "//test[@foo='bar]"
         try:
             x.xpath(xpath)
@@ -219,43 +190,16 @@ class SelectorTestCase(unittest.TestCase):
         else:
             raise AssertionError("A invalid XPath does not raise an exception")
 
-    def test_http_header_encoding_precedence(self):
-        # u'\xa3'     = pound symbol in unicode
-        # u'\xc2\xa3' = pound symbol in utf-8
-        # u'\xa3'     = pound symbol in latin-1 (iso-8859-1)
-
-        meta = u'<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">'
-        head = u'<head>' + meta + u'</head>'
-        body_content = u'<span id="blank">\xa3</span>'
-        body = u'<body>' + body_content + u'</body>'
-        html = u'<html>' + head + body + u'</html>'
-        encoding = 'utf-8'
-        html_utf8 = html.encode(encoding)
-
-        headers = {'Content-Type': ['text/html; charset=utf-8']}
-        response = HtmlResponse(url="http://example.com", headers=headers, body=html_utf8)
-        x = self.sscls(response)
-        self.assertEquals(x.xpath("//span[@id='blank']/text()").extract(),
-                          [u'\xa3'])
-
     def test_empty_bodies(self):
         # shouldn't raise errors
-        r1 = TextResponse('http://www.example.com', body='')
-        self.sscls(r1).xpath('//text()').extract()
+        self.sscls(url='http://www.example.com', text='').xpath('//text()').extract()
 
     def test_null_bytes(self):
         # shouldn't raise errors
-        r1 = TextResponse('http://www.example.com', \
-                          body='<root>pre\x00post</root>', \
-                          encoding='utf-8')
-        self.sscls(r1).xpath('//text()').extract()
-
-    def test_badly_encoded_body(self):
-        # \xe9 alone isn't valid utf8 sequence
-        r1 = TextResponse('http://www.example.com', \
-                          body='<html><p>an Jos\xe9 de</p><html>', \
-                          encoding='utf-8')
-        self.sscls(r1).xpath('//text()').extract()
+        self.sscls(url='http://www.example.com',
+                    text='<root>pre\x00post</root>',
+                    type='xml') \
+            .xpath('//text()').extract()
 
     def test_select_on_unevaluable_nodes(self):
         r = self.sscls(text=u'<span class="big">some text</span>')
@@ -284,13 +228,6 @@ class SelectorTestCase(unittest.TestCase):
         self.assertEquals(x2.extract(), [u'<b>Options:</b>'])
     test_nested_select_on_text_nodes.skip = "Text nodes lost parent node reference in lxml"
 
-    def test_weakref_slots(self):
-        """Check that classes are using slots and are weak-referenceable"""
-        x = self.sscls()
-        weakref.ref(x)
-        assert not hasattr(x, '__dict__'), "%s does not use __slots__" % \
-            x.__class__.__name__
-
     def test_remove_namespaces(self):
         xml = """<?xml version="1.0" encoding="UTF-8"?>
 <feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US" xmlns:media="http://search.yahoo.com/mrss/">
@@ -298,7 +235,7 @@ class SelectorTestCase(unittest.TestCase):
   <link type="application/atom+xml">
 </feed>
 """
-        sel = self.sscls(XmlResponse("http://example.com/feed.atom", body=xml))
+        sel = self.sscls(url="http://example.com/feed.atom", text=xml, type="xml")
         self.assertEqual(len(sel.xpath("//link")), 0)
         sel.remove_namespaces()
         self.assertEqual(len(sel.xpath("//link")), 2)
@@ -310,7 +247,7 @@ class SelectorTestCase(unittest.TestCase):
   <link atom:type="application/atom+xml">
 </feed>
 """
-        sel = self.sscls(XmlResponse("http://example.com/feed.atom", body=xml))
+        sel = self.sscls(url="http://example.com/feed.atom", text=xml, type="xml")
         self.assertEqual(len(sel.xpath("//link/@type")), 0)
         sel.remove_namespaces()
         self.assertEqual(len(sel.xpath("//link/@type")), 2)
@@ -334,17 +271,15 @@ class SelectorTestCase(unittest.TestCase):
                     </div>
                   </body>"""
 
-        response = HtmlResponse(url="http://example.com", body=body)
-
         # .getparent() is available for text nodes and attributes
         # only when smart_strings are on
-        x = self.sscls(response)
+        x = self.sscls(url="http://example.com", text=body)
         li_text = x.xpath('//li/text()')
         self.assertFalse(any(map(lambda e: hasattr(e._root, 'getparent'), li_text)))
         div_class = x.xpath('//div/@class')
         self.assertFalse(any(map(lambda e: hasattr(e._root, 'getparent'), div_class)))
 
-        x = SmartStringsSelector(response)
+        x = SmartStringsSelector(url="http://example.com", text=body)
         li_text = x.xpath('//li/text()')
         self.assertTrue(all(map(lambda e: hasattr(e._root, 'getparent'), li_text)))
         div_class = x.xpath('//div/@class')
@@ -355,116 +290,11 @@ class SelectorTestCase(unittest.TestCase):
             '<!DOCTYPE foo [ <!ELEMENT foo ANY > <!ENTITY xxe SYSTEM '\
             '"file:///etc/passwd" >]><foo>&xxe;</foo>'
 
-        response = XmlResponse('http://example.com', body=malicious_xml)
-        sel = self.sscls(response=response)
+        sel = self.sscls(url='http://example.com', text=malicious_xml, type="xml")
 
         self.assertEqual(sel.extract(), '<foo>&xxe;</foo>')
 
 
-class DeprecatedXpathSelectorTest(unittest.TestCase):
-
-    text = '<div><img src="a.jpg"><p>Hello</div>'
-
-    def test_warnings_xpathselector(self):
-        cls = XPathSelector
-        with warnings.catch_warnings(record=True) as w:
-            class UserClass(cls):
-                pass
-
-            # subclassing must issue a warning
-            self.assertEqual(len(w), 1, str(cls))
-            self.assertIn('scrapy.Selector', str(w[0].message))
-
-            # subclass instance doesn't issue a warning
-            usel = UserClass(text=self.text)
-            self.assertEqual(len(w), 1)
-
-            # class instance must issue a warning
-            sel = cls(text=self.text)
-            self.assertEqual(len(w), 2, str((cls, [x.message for x in w])))
-            self.assertIn('scrapy.Selector', str(w[1].message))
-
-            # subclass and instance checks
-            self.assertTrue(issubclass(cls, Selector))
-            self.assertTrue(isinstance(sel, Selector))
-            self.assertTrue(isinstance(usel, Selector))
-
-    def test_warnings_xmlxpathselector(self):
-        cls = XmlXPathSelector
-        with warnings.catch_warnings(record=True) as w:
-            class UserClass(cls):
-                pass
-
-            # subclassing must issue a warning
-            self.assertEqual(len(w), 1, str(cls))
-            self.assertIn('scrapy.Selector', str(w[0].message))
-
-            # subclass instance doesn't issue a warning
-            usel = UserClass(text=self.text)
-            self.assertEqual(len(w), 1)
-
-            # class instance must issue a warning
-            sel = cls(text=self.text)
-            self.assertEqual(len(w), 2, str((cls, [x.message for x in w])))
-            self.assertIn('scrapy.Selector', str(w[1].message))
-
-            # subclass and instance checks
-            self.assertTrue(issubclass(cls, Selector))
-            self.assertTrue(issubclass(cls, XPathSelector))
-            self.assertTrue(isinstance(sel, Selector))
-            self.assertTrue(isinstance(usel, Selector))
-            self.assertTrue(isinstance(sel, XPathSelector))
-            self.assertTrue(isinstance(usel, XPathSelector))
-
-    def test_warnings_htmlxpathselector(self):
-        cls = HtmlXPathSelector
-        with warnings.catch_warnings(record=True) as w:
-            class UserClass(cls):
-                pass
-
-            # subclassing must issue a warning
-            self.assertEqual(len(w), 1, str(cls))
-            self.assertIn('scrapy.Selector', str(w[0].message))
-
-            # subclass instance doesn't issue a warning
-            usel = UserClass(text=self.text)
-            self.assertEqual(len(w), 1)
-
-            # class instance must issue a warning
-            sel = cls(text=self.text)
-            self.assertEqual(len(w), 2, str((cls, [x.message for x in w])))
-            self.assertIn('scrapy.Selector', str(w[1].message))
-
-            # subclass and instance checks
-            self.assertTrue(issubclass(cls, Selector))
-            self.assertTrue(issubclass(cls, XPathSelector))
-            self.assertTrue(isinstance(sel, Selector))
-            self.assertTrue(isinstance(usel, Selector))
-            self.assertTrue(isinstance(sel, XPathSelector))
-            self.assertTrue(isinstance(usel, XPathSelector))
-
-    def test_xpathselector(self):
-        with warnings.catch_warnings(record=True):
-            hs = XPathSelector(text=self.text)
-            self.assertEqual(hs.select("//div").extract(),
-                             [u'<div><img src="a.jpg"><p>Hello</p></div>'])
-            self.assertRaises(RuntimeError, hs.css, 'div')
-
-    def test_htmlxpathselector(self):
-        with warnings.catch_warnings(record=True):
-            hs = HtmlXPathSelector(text=self.text)
-            self.assertEqual(hs.select("//div").extract(),
-                             [u'<div><img src="a.jpg"><p>Hello</p></div>'])
-            self.assertRaises(RuntimeError, hs.css, 'div')
-
-    def test_xmlxpathselector(self):
-        with warnings.catch_warnings(record=True):
-            xs = XmlXPathSelector(text=self.text)
-            self.assertEqual(xs.select("//div").extract(),
-                             [u'<div><img src="a.jpg"><p>Hello</p></img></div>'])
-            self.assertRaises(RuntimeError, xs.css, 'div')
-
-
 class ExsltTestCase(unittest.TestCase):
 
     sscls = Selector
@@ -479,8 +309,7 @@ class ExsltTestCase(unittest.TestCase):
         <a href="http://www.bayes.co.uk/xml/index.xml?/xml/utils/rechecker.xml">EXSLT match example</a>
         </div>
         """
-        response = TextResponse(url="http://example.com", body=body)
-        sel = self.sscls(response)
+        sel = self.sscls(url="http://example.com", text=body)
 
         # re:test()
         self.assertEqual(
@@ -557,8 +386,7 @@ class ExsltTestCase(unittest.TestCase):
           </div>
         </div>
         """
-        response = TextResponse(url="http://example.com", body=body)
-        sel = self.sscls(response)
+        sel = self.sscls(url="http://example.com", text=body)
 
         self.assertEqual(
             sel.xpath('''//div[@itemtype="http://schema.org/Event"]
diff --git a/tests/test_selector_csstranslator.py b/tests/test_selector_csstranslator.py
index 7ef9003..b648320 100644
--- a/tests/test_selector_csstranslator.py
+++ b/tests/test_selector_csstranslator.py
@@ -2,9 +2,10 @@
 Selector tests for cssselect backend
 """
 from twisted.trial import unittest
-from scrapy.http import HtmlResponse
-from scrapy.selector.csstranslator import ScrapyHTMLTranslator
-from scrapy.selector import Selector
+
+from selectors import Selector
+from selectors.csstranslator import SelectorHTMLTranslator
+
 from cssselect.parser import SelectorSyntaxError
 from cssselect.xpath import ExpressionError
 
@@ -47,7 +48,7 @@ HTMLBODY = '''
 
 class TranslatorMixinTest(unittest.TestCase):
 
-    tr_cls = ScrapyHTMLTranslator
+    tr_cls = SelectorHTMLTranslator
 
     def setUp(self):
         self.tr = self.tr_cls()
@@ -119,8 +120,7 @@ class CSSSelectorTest(unittest.TestCase):
     sscls = Selector
 
     def setUp(self):
-        self.htmlresponse = HtmlResponse('http://example.com', body=HTMLBODY)
-        self.sel = self.sscls(self.htmlresponse)
+        self.sel = self.sscls(url='http://example.com', text=HTMLBODY)
 
     def x(self, *a, **kw):
         return [v.strip() for v in self.sel.css(*a, **kw).extract() if v.strip()]
-- 
1.9.1

